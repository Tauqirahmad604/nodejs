name: Build, Push Docker Image to ECR, and Deploy to ECS

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS credentials for ECR authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 095218681429.dkr.ecr.us-east-1.amazonaws.com

      # Build and push the Docker image to ECR
      - name: Build and push Docker image
        run: |
          IMAGE_URI=095218681429.dkr.ecr.us-east-1.amazonaws.com/test/first
          docker buildx build --platform linux/amd64 --push -t $IMAGE_URI:${{ github.sha }} .

      # Create or update the ECS task definition
      - name: Register ECS Task Definition
        id: register-task-def
        run: |
          IMAGE_URI=095218681429.dkr.ecr.us-east-1.amazonaws.com/test/first
          TASK_DEFINITION=$(jq -n \
            --arg image "$IMAGE_URI:latest" \
            '{
              family: "my-task",
              networkMode: "awsvpc",
              containerDefinitions: [
                {
                  name: "my-app",
                  image: $image,
                  memory: 512,
                  cpu: 256,
                  essential: true,
                  portMappings: [
                    {
                      containerPort: 3001,
                      hostPort: 3001,
                      protocol: "tcp"
                    }
                  ]
                }
              ]
            }')
          echo $TASK_DEFINITION > task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      # Update the ECS service to use the new task definition
      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster Dev --service my-service --force-new-deployment --task-definition my-task
